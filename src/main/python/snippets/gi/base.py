#!/usr/bin/env python
#
# [SNIPPET_NAME: AppIndicator Script - PyGI version (Python2/Python3 compatible)]
# [SNIPPET_DESCRIPTION: This script is generated by Appinpy java library]
# [SNIPPET_AUTHOR: Piotr Jasiowka <www.jasiowka.pl>]
# [SNIPPET_LICENSE: GPL]

import os
from gi.repository import Gtk, Gdk
try:
 from gi.repository import AppIndicator3 as appindicator
except:
 from gi.repository import appindicator
try:
 import xmlrpclib
except:
 from xmlrpc import client as xmlrpclib
try:
 import SimpleXMLRPCServer
except:
 from xmlrpc import server as SimpleXMLRPCServer
import threading
import time

class RPCServerThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.server = SimpleXMLRPCServer.SimpleXMLRPCServer(("localhost", 8003))
        self.server.register_instance(self)
        self.quit = False
    def run(self):
        while not self.quit:
            self.server.handle_request()
            time.sleep(0.1)
    def shutdown(self):
        self.quit = True
        indicator.gtkShutdown()
        return 0
    def changeIcon(self, name):
        indicator.ind.set_icon(name)
        return 0
    def doItemAction(self, item, action, param):
        indicator.doItemAction(item, action, param)
        return 0

class AppinpyScript:
    def __init__(self):
        self.ind = appindicator.Indicator.new("appinpy-script", "indicator-messages", appindicator.IndicatorCategory.APPLICATION_STATUS)
        self.ind.set_status(appindicator.IndicatorStatus.ACTIVE)
        # search current path for icons (script execution path)
        self.ind.set_icon_theme_path(os.path.dirname(os.path.realpath(__file__)))
        self.ind.set_icon("{--startIcon--}")

        # run RPC server in another thread
        self.rpcServer = RPCServerThread()
        self.rpcServer.start()

        # create RPC client to access Java-side
        self.rpcClient = xmlrpclib.Server('http://localhost:8000')

        # menu code here
        {--menu--}
        self.qItem = Gtk.MenuItem("{--quitText--}")
        self.qItem.connect("activate", self.quit)
        self.qItem.show()
        self.{--mainMenuId--}.append(menu_items)
        self.ind.set_menu(self.{--mainMenuId--})

    def gtkShutdown(self):
        Gtk.main_quit()
        return
    # quit menu action
    def quit(self, widget, data=None):
        # shutdown GTK
        self.gtkShutdown()
        # shutdown RPC server
        locrpc = xmlrpclib.Server('http://localhost:8003')
        locrpc.shutdown()
        # send signal to clean up Java-side and optionally do some user actions
        self.rpcClient.Signals.shutdown()
        return
    # other menu actions here
    {--actions--}
    # menu items runtime changes invoked by java
    def doItemAction(self, item, action, param):
        {--javaActions--}
        return 0

if __name__ == "__main__":
    GObject.threads_init()
    Gdk.threads_init()
    indicator = AppinpyScript()
    Gdk.threads_enter()
    Gtk.main()
    Gdk.threads_leave()

